// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sorigin;

namespace Sorigin.Migrations
{
    [DbContext(typeof(SoriginContext))]
    [Migration("20211030061556_LocalMedia")]
    partial class LocalMedia
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Sorigin.Models.Media", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_hash");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Instant>("Uploaded")
                        .HasColumnType("timestamp")
                        .HasColumnName("uploaded");

                    b.HasKey("ID")
                        .HasName("pk_media");

                    b.HasIndex("Contract")
                        .HasDatabaseName("ix_media_contract");

                    b.HasIndex("FileHash")
                        .HasDatabaseName("ix_media_file_hash");

                    b.ToTable("media");
                });

            modelBuilder.Entity("Sorigin.Models.Platforms.DiscordUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_discord_user");

                    b.ToTable("discord_user");
                });

            modelBuilder.Entity("Sorigin.Models.Platforms.SteamUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_steam_user");

                    b.ToTable("steam_user");
                });

            modelBuilder.Entity("Sorigin.Models.RefreshToken", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<Instant>("Expiration")
                        .HasColumnType("timestamp")
                        .HasColumnName("expiration");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Value")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.HasIndex("Value")
                        .HasDatabaseName("ix_refresh_tokens_value");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("Sorigin.Models.Transfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("TransferID")
                        .HasColumnType("uuid")
                        .HasColumnName("transfer_id");

                    b.HasKey("ID")
                        .HasName("pk_transfers");

                    b.HasIndex("ID")
                        .HasDatabaseName("ix_transfers_id");

                    b.HasIndex("TransferID")
                        .HasDatabaseName("ix_transfers_transfer_id");

                    b.ToTable("transfers");
                });

            modelBuilder.Entity("Sorigin.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("DiscordId")
                        .HasColumnType("text")
                        .HasColumnName("discord_id");

                    b.Property<int>("GamePlatform")
                        .HasColumnType("integer")
                        .HasColumnName("game_platform");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SteamId")
                        .HasColumnType("text")
                        .HasColumnName("steam_id");

                    b.Property<List<Guid>>("Transfers")
                        .HasColumnType("uuid[]")
                        .HasColumnName("transfers");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("ID")
                        .HasName("pk_users");

                    b.HasIndex("DiscordId")
                        .HasDatabaseName("ix_users_discord_id");

                    b.HasIndex("ID")
                        .HasDatabaseName("ix_users_id");

                    b.HasIndex("SteamId")
                        .HasDatabaseName("ix_users_steam_id");

                    b.HasIndex("Username")
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Sorigin.Models.RefreshToken", b =>
                {
                    b.HasOne("Sorigin.Models.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .HasConstraintName("fk_refresh_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sorigin.Models.User", b =>
                {
                    b.HasOne("Sorigin.Models.Platforms.DiscordUser", "Discord")
                        .WithMany()
                        .HasForeignKey("DiscordId")
                        .HasConstraintName("fk_users_discord_user_discord_id");

                    b.HasOne("Sorigin.Models.Platforms.SteamUser", "Steam")
                        .WithMany()
                        .HasForeignKey("SteamId")
                        .HasConstraintName("fk_users_steam_user_steam_id");

                    b.Navigation("Discord");

                    b.Navigation("Steam");
                });

            modelBuilder.Entity("Sorigin.Models.User", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
